# name: TestOrderPost.test_amount_equal_to_discount[payload0-201]
  <class 'dict'> {
    'after_discount': 100.0,
    'amount': 100,
    'tax': 5.0,
    'total': 95.0,
  }
---
# name: TestOrderPost.test_amount_equal_to_discount[payload1-201]
  <class 'dict'> {
    'after_discount': 700.0,
    'amount': 1000,
    'tax': 35.0,
    'total': 665.0,
  }
---
# name: TestOrderPost.test_amount_greater_than_discount[payload0-201]
  <class 'dict'> {
    'after_discount': 100.01,
    'amount': 100.01,
    'tax': 5.01,
    'total': 95.0,
  }
---
# name: TestOrderPost.test_amount_less_than_discount[payload0-201]
  <class 'dict'> {
    'after_discount': 99.9,
    'amount': 99.9,
    'tax': 5.0,
    'total': 94.9,
  }
---
# name: TestOrderPost.test_best_discount_applied[payload0-201]
  <class 'dict'> {
    'after_discount': 2100.0,
    'amount': 3000,
    'tax': 105.0,
    'total': 1995.0,
  }
---
# name: TestOrderPost.test_empty_list[payload0-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
        ],
        'msg': 'Empty sequence is not allowed.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_incorrect_schema[payload0-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
        ],
        'msg': 'field required',
        'type': 'value_error.missing',
      },
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'state_name',
        ],
        'msg': 'field required',
        'type': 'value_error.missing',
      },
    ],
  }
---
# name: TestOrderPost.test_incorrect_schema[payload1-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
        ],
        'msg': 'field required',
        'type': 'value_error.missing',
      },
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'state_name',
        ],
        'msg': 'field required',
        'type': 'value_error.missing',
      },
    ],
  }
---
# name: TestOrderPost.test_incorrect_schema[payload2-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'field required',
        'type': 'value_error.missing',
      },
    ],
  }
---
# name: TestOrderPost.test_incorrect_schema[payload3-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          1,
          'quantity',
        ],
        'msg': 'field required',
        'type': 'value_error.missing',
      },
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          1,
          'price',
        ],
        'msg': 'field required',
        'type': 'value_error.missing',
      },
    ],
  }
---
# name: TestOrderPost.test_incorrect_schema[payload4-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'state_name',
        ],
        'msg': 'field required',
        'type': 'value_error.missing',
      },
    ],
  }
---
# name: TestOrderPost.test_negative_price[payload0-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'Negative number is not allowed.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_negative_quantity[payload0-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'quantity',
        ],
        'msg': 'Negative number is not allowed.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_price_correct[payload0-201]
  <class 'dict'> {
    'after_discount': 0.0,
    'amount': 0.0,
    'tax': 0.0,
    'total': 0.0,
  }
---
# name: TestOrderPost.test_price_correct[payload1-201]
  <class 'dict'> {
    'after_discount': 0.0,
    'amount': 0.0,
    'tax': 0.0,
    'total': 0.0,
  }
---
# name: TestOrderPost.test_price_not_float[payload0-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'value is not a valid decimal',
        'type': 'type_error.decimal',
      },
    ],
  }
---
# name: TestOrderPost.test_price_not_float[payload1-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'none is not an allowed value',
        'type': 'type_error.none.not_allowed',
      },
    ],
  }
---
# name: TestOrderPost.test_price_not_money[payload0-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'Not the money format.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_price_not_money[payload1-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'Not the money format.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_price_not_money[payload2-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'Not the money format.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_price_not_money[payload3-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'Not the money format.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_price_not_money[payload4-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'Not the money format.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_price_not_money[payload5-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'price',
        ],
        'msg': 'Not the money format.',
        'type': 'assertion_error',
      },
    ],
  }
---
# name: TestOrderPost.test_quantity_not_int[payload0-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'quantity',
        ],
        'msg': 'value is not a valid integer',
        'type': 'type_error.integer',
      },
    ],
  }
---
# name: TestOrderPost.test_quantity_not_int[payload1-422]
  <class 'dict'> {
    'detail': <class 'list'> [
      <class 'dict'> {
        'loc': <class 'list'> [
          'body',
          'items',
          0,
          'quantity',
        ],
        'msg': 'none is not an allowed value',
        'type': 'type_error.none.not_allowed',
      },
    ],
  }
---
# name: TestOrderPost.test_state_not_exists[payload0-400]
  <class 'dict'> {
    'detail': 'Tax for state state1 not exist.',
  }
---
# name: TestOrderPost.test_state_not_exists[payload1-400]
  <class 'dict'> {
    'detail': 'Tax for state st not exist.',
  }
---
# name: TestOrderPost.test_valid[payload0]
  <class 'dict'> {
    'after_discount': 0.0,
    'amount': 0,
    'tax': 0.0,
    'total': 0.0,
  }
---
# name: TestOrderPost.test_valid[payload1]
  <class 'dict'> {
    'after_discount': 0.0,
    'amount': 0,
    'tax': 0.0,
    'total': 0.0,
  }
---
# name: TestOrderPost.test_valid[payload2]
  <class 'dict'> {
    'after_discount': 863.8,
    'amount': 1234.0,
    'tax': 43.19,
    'total': 820.61,
  }
---
# name: TestOrderPost.test_valid[payload3]
  <class 'dict'> {
    'after_discount': 6.93,
    'amount': 6.93,
    'tax': 0.35,
    'total': 6.58,
  }
---
